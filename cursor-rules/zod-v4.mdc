---
description: Zod v4 Coding Guidelines. ALWAYS read this when using Zod
globs:
alwaysApply: false
---

<zod-v4-guidelines>

<title>Zod v4 Coding Guidelines</title>

<critical>
CRITICAL: Always import from 'zod/v4', never 'zod'
</critical>

<core-rules>
<title>Core Rules</title>

<rule type="type-inference">
Every schema MUST have inferred type above it

<example>
```typescript
export type User = z.infer<typeof User>
export const User = z.object({...})
```
</example>

- ALWAYS place type above schema
- ALWAYS same name for type & schema
- NEVER use "Schema" suffix
- ALWAYS use JSDoc (/** */), never //
- NO EXCEPTIONS - even for internal/helper schemas
</rule>

<rule type="string-validation">
String validations are standalone functions

<example>
```typescript
// WRONG: z.string().email()
// RIGHT: z.email(), z.url(), z.uuid(), z.ip()
```
</example>
</rule>

<rule type="error-messages">
Use `error` param sparingly - Zod's defaults are excellent

<example>
```typescript
// WRONG: z.email({error: "Invalid email"}) // Redundant!
// RIGHT: z.email() // Zod says "Invalid email"
// RIGHT: Only for business logic:
z.string().check((val) => /[A-Z]/.test(val), {
	error: 'Must contain uppercase',
})
```
</example>
</rule>

<rule type="number-types">
Number changes
- Use z.number() for general numbers
- z.int() for integers only (not z.number().int())
- z.int32(), z.float64() for specific types
- Numbers finite by default
</rule>

<rule type="object-types">
Object types
- z.object() - strips unknowns (default)
- z.strictObject() - rejects extras
- z.looseObject() - allows extras
</rule>

<rule type="validation">
Custom validation: Use .check() not .superRefine()
</rule>

<rule type="error-formatting">
Error formatting: z.prettifyError() or z.treeifyError()
</rule>

<rule type="functions">
Functions:
<example>
```typescript
z.function({
	input: [z.string()],
	output: z.number(),
})
```
</example>
</rule>

<rule type="records">
Records: z.record(keyType, valueType)
</rule>

<rule type="iso-formats">
ISO formats: z.iso.datetime(), z.iso.date()
</rule>

<rule type="other-features">
Other key features:
- Default: .default() applies to output; use .prefault() for v3 behavior
- File validation: z.file().min(1024).max(5*1024*1024).mime(['image/jpeg'])
- Pipe: z.pipe(z.string(), z.number()) for transformations
- Async: Use .check(async (val) => {...}) for async validation
- Arrays: z.array(z.email()) or z.email().array()
- Optional: .optional(), .nullable(), .nullish()
</rule>

</core-rules>

<quick-reference>
<title>Quick Reference</title>

| v3                      | v4                          |
| ----------------------- | --------------------------- |
| z.string().email()      | z.email()                   |
| {message: "err"}        | {error: "err"}              |
| .strict()               | z.strictObject()            |
| .format()               | z.treeifyError()            |
| z.string().datetime()   | z.iso.datetime()            |
| .args().returns()       | {input:[...], output:...}   |
</quick-reference>

<example>
<title>Example</title>

```typescript
import { z } from 'zod/v4'

/** User registration */
export type UserReg = z.infer<typeof UserReg>
export const UserReg = z.object({
	email: z.email(),
	password: z
		.string()
		.min(8)
		.check((pwd) => /[A-Z]/.test(pwd) && /\d/.test(pwd), { error: 'Need uppercase & number' }),
	age: z.number().min(18),
})
```
</example>

</zod-v4-guidelines>