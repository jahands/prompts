---
description: Zod v4 Coding Guidelines. ALWAYS read this when using Zod
globs:
alwaysApply: false
---

<zod-v4-guidelines>

# Zod v4 Coding Guidelines

<critical>
**CRITICAL: Always import from 'zod/v4', never 'zod'**
</critical>

<core-rules>
## Core Rules

<rule>
**Every schema MUST have inferred type above it**

<example>
```typescript
export type User = z.infer<typeof User>
export const User = z.object({...})
```
</example>

- **ALWAYS** place type above schema
- **ALWAYS** same name for type & schema
- **NEVER** use "Schema" suffix
- **ALWAYS** use JSDoc (`/** */`), never `//`
- **NO EXCEPTIONS** - even for internal/helper schemas
</rule>

<rule>
**String validations are standalone functions**

<example>
```typescript
// ❌ z.string().email()
// ✅ z.email(), z.url(), z.uuid(), z.ip()
```
</example>
</rule>

<rule>
**Use `error` param sparingly** - Zod's defaults are excellent

<example>
```typescript
// ❌ z.email({error: "Invalid email"}) // Redundant!
// ✅ z.email() // Zod says "Invalid email"
// ✅ Only for business logic:
z.string().check((val) => /[A-Z]/.test(val), {
	error: 'Must contain uppercase',
})
```
</example>
</rule>

<rule>
**Number changes**

- Use `z.number()` for general numbers
- `z.int()` for integers only (not `z.number().int()`)
- `z.int32()`, `z.float64()` for specific types
- Numbers finite by default
</rule>

<rule>
**Object types**

- `z.object()` - strips unknowns (default)
- `z.strictObject()` - rejects extras
- `z.looseObject()` - allows extras
</rule>

<rule>
**Custom validation**: Use `.check()` not `.superRefine()`
</rule>

<rule>
**Error formatting**: `z.prettifyError()` or `z.treeifyError()`
</rule>

<rule>
**Functions**:

<example>
```typescript
z.function({
	input: [z.string()],
	output: z.number(),
})
```
</example>
</rule>

<rule>
**Records**: `z.record(keyType, valueType)`
</rule>

<rule>
**ISO formats**: `z.iso.datetime()`, `z.iso.date()`
</rule>

<rule>
**Other key features**:
- **Default**: `.default()` applies to output; use `.prefault()` for v3 behavior
- **File validation**: `z.file().min(1024).max(5*1024*1024).mime(['image/jpeg'])`
- **Pipe**: `z.pipe(z.string(), z.number())` for transformations
- **Async**: Use `.check(async (val) => {...})` for async validation
- **Arrays**: `z.array(z.email())` or `z.email().array()`
- **Optional**: `.optional()`, `.nullable()`, `.nullish()`
</rule>

</core-rules>

<quick-reference>
## Quick Reference

| v3                      | v4                          |
| ----------------------- | --------------------------- |
| `z.string().email()`    | `z.email()`                 |
| `{message: "err"}`      | `{error: "err"}`            |
| `.strict()`             | `z.strictObject()`          |
| `.format()`             | `z.treeifyError()`          |
| `z.string().datetime()` | `z.iso.datetime()`          |
| `.args().returns()`     | `{input:[...], output:...}` |
</quick-reference>

<example>
## Example

```typescript
import { z } from 'zod/v4'

/** User registration */
export type UserReg = z.infer<typeof UserReg>
export const UserReg = z.object({
	email: z.email(),
	password: z
		.string()
		.min(8)
		.check((pwd) => /[A-Z]/.test(pwd) && /\d/.test(pwd), { error: 'Need uppercase & number' }),
	age: z.number().min(18),
})
```
</example>

</zod-v4-guidelines>
