---
description: Enforce try-catch blocks for async operations with structured error logging
globs:
alwaysApply: false
---
<async-error-handling>

<title>Async Operations Error Handling</title>

<rules>
- Always wrap async operations in try-catch blocks
- Log errors with structured logging that includes:
  - `timestamp`: ISO 8601 format timestamp
  - `errorType`: Error constructor name or custom error type
  - `userContext`: Relevant user information (userId, sessionId, etc.)
- Never swallow errors silently
- Re-throw errors after logging if they need to propagate
- Use consistent error structure across the application
</rules>

<examples>
<example type="good">
```typescript
async function fetchUserData(userId: string) {
  try {
    const response = await api.getUser(userId);
    return response.data;
  } catch (error) {
    logger.error({
      timestamp: new Date().toISOString(),
      errorType: error.constructor.name,
      userContext: { userId },
      message: error.message,
      stack: error.stack
    });
    throw error;
  }
}
```
</example>
</examples>

</async-error-handling>