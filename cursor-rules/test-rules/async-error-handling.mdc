---
description: Enforce try-catch blocks for async operations with structured error logging
globs:
alwaysApply: false
---
<async-error-handling>

<title>Async Operations Error Handling</title>

<rules>
- Always wrap async operations in try-catch blocks
- Never use unhandled promises or async functions without error handling
- Log errors using structured logging format
- Include timestamp, error type, and user context in all error logs
- Use consistent error logging structure across the codebase
- Propagate errors appropriately based on context
</rules>

<structured-logging-format>
- `timestamp`: ISO 8601 format timestamp
- `errorType`: Error constructor name or custom error type
- `message`: Error message
- `stack`: Error stack trace
- `userContext`: User ID, session ID, or relevant user information
- `operationContext`: What operation was being performed
- `metadata`: Additional relevant data
</structured-logging-format>

<examples>
<example type="good">
```typescript
async function fetchUserData(userId: string, sessionId: string) {
  try {
    const response = await fetch(`/api/users/${userId}`);
    const data = await response.json();
    return data;
  } catch (error) {
    logger.error({
      timestamp: new Date().toISOString(),
      errorType: error.constructor.name,
      message: error.message,
      stack: error.stack,
      userContext: { userId, sessionId },
      operationContext: 'fetchUserData',
      metadata: { endpoint: `/api/users/${userId}` }
    });
    throw error; // Re-throw after logging
  }
}
```
</example>
</examples>

</async-error-handling>