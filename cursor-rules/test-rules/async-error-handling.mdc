---
description: Enforces try-catch blocks for async operations with structured error logging
globs:
alwaysApply: false
---
<async-error-handling>

<title>Async Operations Error Handling</title>

<rules>
- Always wrap async operations in try-catch blocks
- Log errors with structured format including timestamp, error type, and user context
- Never let async errors silently fail
- Include operation context in error logs
- Use consistent error structure across the application
- Preserve original error stack traces
- Log to appropriate channels based on error severity
</rules>

<error-structure>
- `timestamp`: ISO 8601 format timestamp
- `errorType`: Error constructor name or custom type
- `message`: Human-readable error description
- `stack`: Full stack trace
- `userId`: Current user identifier if available
- `sessionId`: Current session identifier
- `operation`: Name of the operation that failed
- `context`: Additional relevant data
</error-structure>

<examples>
<example type="good">
```typescript
async function fetchUserData(userId: string) {
  try {
    const response = await api.get(`/users/${userId}`);
    return response.data;
  } catch (error) {
    logger.error({
      timestamp: new Date().toISOString(),
      errorType: error.constructor.name,
      message: error.message || 'Failed to fetch user data',
      stack: error.stack,
      userId: userId,
      sessionId: getSessionId(),
      operation: 'fetchUserData',
      context: {
        endpoint: `/users/${userId}`,
        statusCode: error.response?.status
      }
    });
    throw error;
  }
}
```
</example>

<example type="good">
```javascript
async function processPayment(order) {
  try {
    const result = await paymentGateway.charge(order);
    return result;
  } catch (error) {
    logger.error({
      timestamp: new Date().toISOString(),
      errorType: error.constructor.name,
      message: error.message || 'Payment processing failed',
      stack: error.stack,
      userId: order.userId,
      sessionId: getSessionId(),
      operation: 'processPayment',
      context: {
        orderId: order.id,
        amount: order.total,
        gateway: 'stripe'
      }
    });
    throw new PaymentError('Payment processing failed', error);
  }
}
```
</example>
</examples>

</async-error-handling>