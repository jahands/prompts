---
description: RESTful API design patterns including resource naming, HTTP methods, status codes, error handling, pagination, and versioning
globs:
alwaysApply: false
---
<restful-api-design>

<title>RESTful API Design Standards</title>

<overview>Comprehensive guidelines for designing RESTful APIs that are consistent, intuitive, and scalable, covering resource modeling, HTTP semantics, error handling, and evolution strategies</overview>

<key-concepts>
- Resource-oriented architecture
- HTTP method semantics and idempotency
- Stateless communication
- HATEOAS (Hypermedia as the Engine of Application State)
- API versioning strategies
- Consistent error responses
</key-concepts>

<rules>
<rule>
<name>Resource Naming Conventions</name>
<requirements>
- Use plural nouns for collections: `/users`, `/products`, `/orders`
- Use hierarchical relationships: `/users/{userId}/orders/{orderId}`
- Use kebab-case for multi-word resources: `/shopping-carts`, `/user-profiles`
- Avoid verbs in endpoints - resources represent nouns
- Keep URLs lowercase
- Use forward slashes to denote hierarchy
- Never use trailing slashes
- Use query parameters for filtering: `/products?category=electronics&inStock=true`
</requirements>
</rule>

<rule>
<name>HTTP Method Usage</name>
<requirements>
- `GET` - Retrieve resources (safe, idempotent)
- `POST` - Create new resources (not idempotent)
- `PUT` - Full update/replace resource (idempotent)
- `PATCH` - Partial update resource (idempotent)
- `DELETE` - Remove resources (idempotent)
- `HEAD` - Retrieve headers only (same as GET without body)
- `OPTIONS` - Discover allowed methods and CORS info
- Never use GET for state changes
- Use POST for complex operations that don't fit CRUD
</requirements>
</rule>

<rule>
<name>Status Code Standards</name>
<requirements>
- `200 OK` - Successful GET, PUT, PATCH
- `201 Created` - Successful POST with Location header
- `202 Accepted` - Request accepted for async processing
- `204 No Content` - Successful DELETE or PUT with no response body
- `400 Bad Request` - Client error, malformed request
- `401 Unauthorized` - Missing or invalid authentication
- `403 Forbidden` - Authenticated but not authorized
- `404 Not Found` - Resource doesn't exist
- `409 Conflict` - Request conflicts with current state
- `422 Unprocessable Entity` - Validation errors
- `429 Too Many Requests` - Rate limit exceeded
- `500 Internal Server Error` - Server error
- `503 Service Unavailable` - Temporary unavailability
</requirements>
</rule>

<rule>
<name>Error Response Format</name>
<requirements>
- Use consistent error structure across all endpoints
- Include error code for programmatic handling
- Provide human-readable message
- Add details for debugging
- Include request ID for tracing
- Provide field-level errors for validation
- Use RFC 7807 Problem Details format when applicable
</requirements>
</rule>

<rule>
<name>Pagination Strategies</name>
<requirements>
- Use limit/offset for simple pagination: `?limit=20&offset=40`
- Use cursor-based for large datasets: `?cursor=eyJpZCI6MTAwfQ&limit=20`
- Always include pagination metadata in response
- Provide total count when feasible
- Include next/previous links (HATEOAS)
- Default to reasonable page size (e.g., 20-50 items)
- Set maximum limit to prevent abuse
- Sort consistently (usually by creation date or ID)
</requirements>
</rule>

<rule>
<name>Versioning Approaches</name>
<requirements>
- URI versioning: `/api/v1/users` (most visible)
- Header versioning: `API-Version: 1` or `Accept: application/vnd.api+json;version=1`
- Query parameter: `/users?version=1` (least recommended)
- Use semantic versioning for version numbers
- Maintain at least one previous version
- Provide deprecation notices with timeline
- Document breaking changes clearly
- Never break backwards compatibility in minor versions
</requirements>
</rule>
</rules>

<examples>
<example type="error-response">
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "The request contains invalid fields",
    "requestId": "req_abc123def456",
    "timestamp": "2024-01-15T10:30:00Z",
    "details": [
      {
        "field": "email",
        "code": "INVALID_FORMAT",
        "message": "Email must be a valid email address"
      },
      {
        "field": "age",
        "code": "OUT_OF_RANGE",
        "message": "Age must be between 18 and 120"
      }
    ]
  }
}
```
</example>

<example type="pagination-response">
```json
{
  "data": [
    { "id": 1, "name": "Product 1" },
    { "id": 2, "name": "Product 2" }
  ],
  "pagination": {
    "total": 156,
    "limit": 20,
    "offset": 40,
    "hasNext": true,
    "hasPrevious": true
  },
  "links": {
    "self": "/api/v1/products?limit=20&offset=40",
    "first": "/api/v1/products?limit=20&offset=0",
    "previous": "/api/v1/products?limit=20&offset=20",
    "next": "/api/v1/products?limit=20&offset=60",
    "last": "/api/v1/products?limit=20&offset=140"
  }
}
```
</example>

<example type="resource-endpoints">
```
GET    /api/v1/users              # List users
POST   /api/v1/users              # Create user
GET    /api/v1/users/{id}         # Get specific user
PUT    /api/v1/users/{id}         # Replace user
PATCH  /api/v1/users/{id}         # Update user fields
DELETE /api/v1/users/{id}         # Delete user

GET    /api/v1/users/{id}/orders  # List user's orders
POST   /api/v1/users/{id}/orders  # Create order for user
GET    /api/v1/orders/{id}        # Get specific order
```
</example>
</examples>

</restful-api-design>