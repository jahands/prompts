---
description: RESTful API design standards including resource naming, HTTP methods, status codes, error handling, pagination, and versioning
globs:
alwaysApply: false
---
<restful-api-design>

<title>RESTful API Design Standards</title>

<overview>Comprehensive guidelines for designing consistent, scalable RESTful APIs that follow industry best practices</overview>

<key-concepts>
- Resource-oriented architecture
- HTTP method semantics
- Stateless communication
- Uniform interface constraints
- HATEOAS (Hypermedia as the Engine of Application State)
</key-concepts>

<resource-naming>

<rules>
- Use plural nouns for collections: `/users`, `/products`, `/orders`
- Use singular nouns for singletons: `/user/profile`, `/cart`
- Use lowercase with hyphens for multi-word resources: `/shopping-carts`
- Nest resources to show relationships: `/users/{id}/orders`
- Avoid verbs in endpoints - let HTTP methods define actions
- Keep nesting shallow (max 3 levels deep)
- Use query parameters for filtering: `/products?category=electronics`
</rules>

<examples>
<example type="good">
```
GET    /users              # List all users
GET    /users/123          # Get specific user
POST   /users              # Create new user
PUT    /users/123          # Update entire user
PATCH  /users/123          # Update partial user
DELETE /users/123          # Delete user
GET    /users/123/orders   # Get user's orders
```
</example>
</examples>

</resource-naming>

<http-methods>

<method-semantics>
- `GET`: Retrieve resources (safe, idempotent)
- `POST`: Create new resources (not idempotent)
- `PUT`: Replace entire resource (idempotent)
- `PATCH`: Partial update (idempotent)
- `DELETE`: Remove resource (idempotent)
- `HEAD`: Get headers only (safe, idempotent)
- `OPTIONS`: Get allowed methods (safe, idempotent)
</method-semantics>

<request-patterns>
<pattern type="collection-operations">
```
GET    /products           # List with optional filters
POST   /products           # Create with full resource in body
DELETE /products           # Bulk delete (use carefully)
```
</pattern>

<pattern type="item-operations">
```
GET    /products/123       # Retrieve single item
PUT    /products/123       # Replace entire item
PATCH  /products/123       # Update specific fields
DELETE /products/123       # Remove single item
```
</pattern>
</request-patterns>

</http-methods>

<status-codes>

<success-codes>
- `200 OK`: Successful GET, PUT, PATCH, or DELETE
- `201 Created`: Successful POST with new resource
- `202 Accepted`: Request accepted for async processing
- `204 No Content`: Successful DELETE or action with no response body
</success-codes>

<client-error-codes>
- `400 Bad Request`: Invalid request syntax or parameters
- `401 Unauthorized`: Missing or invalid authentication
- `403 Forbidden`: Authenticated but not authorized
- `404 Not Found`: Resource doesn't exist
- `409 Conflict`: Request conflicts with current state
- `422 Unprocessable Entity`: Valid syntax but semantic errors
- `429 Too Many Requests`: Rate limit exceeded
</client-error-codes>

<server-error-codes>
- `500 Internal Server Error`: Generic server failure
- `502 Bad Gateway`: Invalid response from upstream
- `503 Service Unavailable`: Temporary unavailability
- `504 Gateway Timeout`: Upstream timeout
</server-error-codes>

</status-codes>

<error-response-format>

<standard-structure>
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Validation failed for the request",
    "details": [
      {
        "field": "email",
        "code": "INVALID_FORMAT",
        "message": "Email format is invalid"
      }
    ],
    "timestamp": "2024-01-15T10:30:00Z",
    "path": "/api/v1/users",
    "requestId": "550e8400-e29b-41d4-a716-446655440000"
  }
}
```
</standard-structure>

<error-codes>
- Machine-readable error codes in SCREAMING_SNAKE_CASE
- Hierarchical structure: `RESOURCE_ACTION_ERROR`
- Common codes: `VALIDATION_ERROR`, `NOT_FOUND`, `UNAUTHORIZED`
- Include field-level errors for validation failures
- Always include request ID for debugging
</error-codes>

</error-response-format>

<pagination>

<offset-pagination>
<description>Simple pagination using offset and limit</description>
```
GET /products?offset=20&limit=10

Response:
{
  "data": [...],
  "pagination": {
    "offset": 20,
    "limit": 10,
    "total": 150,
    "hasNext": true,
    "hasPrev": true
  }
}
```
</offset-pagination>

<cursor-pagination>
<description>Efficient pagination for large datasets</description>
```
GET /products?cursor=eyJpZCI6MTAwfQ&limit=10

Response:
{
  "data": [...],
  "pagination": {
    "cursor": "eyJpZCI6MTEwfQ",
    "limit": 10,
    "hasNext": true
  }
}
```
</cursor-pagination>

<page-pagination>
<description>Traditional page-based pagination</description>
```
GET /products?page=3&size=10

Response:
{
  "data": [...],
  "pagination": {
    "page": 3,
    "size": 10,
    "totalPages": 15,
    "totalElements": 150
  }
}
```
</page-pagination>

<link-headers>
<description>Use Link headers for HATEOAS compliance</description>
```
Link: <https://api.example.com/products?page=2>; rel="prev",
      <https://api.example.com/products?page=4>; rel="next",
      <https://api.example.com/products?page=1>; rel="first",
      <https://api.example.com/products?page=15>; rel="last"
```
</link-headers>

</pagination>

<versioning>

<uri-versioning>
<description>Version in the URL path (most common)</description>
```
https://api.example.com/v1/products
https://api.example.com/v2/products
```
<benefits>
- Clear and explicit
- Easy to route
- Cache-friendly
</benefits>
</uri-versioning>

<header-versioning>
<description>Version in custom header</description>
```
GET /products HTTP/1.1
Host: api.example.com
API-Version: 2.0
```
<benefits>
- Cleaner URLs
- Easier to default to latest
</benefits>
</header-versioning>

<content-negotiation>
<description>Version via Accept header</description>
```
GET /products HTTP/1.1
Host: api.example.com
Accept: application/vnd.example.v2+json
```
<benefits>
- RESTful approach
- Supports format negotiation
</benefits>
</content-negotiation>

<versioning-strategy>
- Start with v1 from day one
- Only increment major version for breaking changes
- Maintain at least one previous version
- Deprecate with clear timelines (minimum 6 months)
- Document migration paths
- Use semantic versioning principles
</versioning-strategy>

</versioning>

<additional-practices>

<filtering-sorting>
```
GET /products?category=electronics&price_min=100&price_max=500
GET /products?sort=price,-created_at  # + ascending, - descending
GET /products?fields=id,name,price    # Sparse fieldsets
```
</filtering-sorting>

<request-response-headers>
- Always include `Content-Type: application/json`
- Use `Accept` header for content negotiation
- Include `X-Request-ID` for request tracking
- Add `X-Rate-Limit-*` headers for rate limiting
- Set proper `Cache-Control` directives
</request-response-headers>

<security-headers>
- `Authorization: Bearer {token}` for authentication
- `X-API-Key` for simple API key auth
- CORS headers for browser-based clients
- `X-Content-Type-Options: nosniff`
- `X-Frame-Options: DENY`
</security-headers>

</additional-practices>

</restful-api-design>