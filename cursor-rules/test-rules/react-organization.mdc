---
description: React component organization - component size limits, hook extraction, and test colocation
globs:
alwaysApply: false
---
<react-component-organization>

<title>React Component Organization</title>

<rules>
- Keep React components under 200 lines
- Extract custom hooks to separate files when logic exceeds 30 lines
- Extract complex logic into custom hooks for reusability
- Colocate test files with components using `.test.tsx` or `.spec.tsx` suffix
- Place hook files in same directory as components that use them
- Name hook files with `use` prefix (e.g., `useAuth.ts`, `useProductData.ts`)
- Split large components into smaller sub-components
- Keep component files focused on rendering logic
- Move business logic to hooks or utility functions
</rules>

<examples>
<example type="good">
```
src/
  components/
    ProductCard/
      ProductCard.tsx          // < 200 lines
      ProductCard.test.tsx     // Colocated test
      useProductActions.ts     // Extracted hook
      ProductCardSkeleton.tsx  // Sub-component
```
</example>

<example type="good">
```typescript
// ProductCard.tsx (focused on rendering)
import { useProductActions } from './useProductActions';

export function ProductCard({ product }: Props) {
  const { addToCart, isLoading } = useProductActions(product.id);
  
  return (
    <div className="product-card">
      <h3>{product.name}</h3>
      <button onClick={addToCart} disabled={isLoading}>
        Add to Cart
      </button>
    </div>
  );
}
```
</example>

<example type="good">
```typescript
// useProductActions.ts (extracted logic)
export function useProductActions(productId: string) {
  const [isLoading, setIsLoading] = useState(false);
  const cart = useCart();
  
  const addToCart = async () => {
    setIsLoading(true);
    try {
      await cart.add(productId);
    } finally {
      setIsLoading(false);
    }
  };
  
  return { addToCart, isLoading };
}
```
</example>
</examples>

</react-component-organization>