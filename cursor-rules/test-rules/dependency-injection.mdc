---
description: TypeScript dependency injection patterns, injection types, and circular dependency resolution
globs:
alwaysApply: false
---
<dependency-injection>

<title>Dependency Injection in TypeScript</title>

<overview>Guidelines for implementing dependency injection patterns, choosing between constructor and property injection, and handling circular dependencies in TypeScript applications</overview>

<key-concepts>
- Inversion of Control (IoC) - Dependencies are provided rather than created
- Constructor injection - Dependencies passed through constructor parameters
- Property injection - Dependencies assigned to properties after instantiation
- Circular dependency - Two or more classes depend on each other
- Dependency injection container - Manages object creation and dependency resolution
</key-concepts>

<rules>
<rule>
<name>Constructor Injection (Default Approach)</name>
<requirements>
- Use constructor injection for all required dependencies
- Mark injected dependencies as `private readonly` or `protected readonly`
- Always inject interfaces or abstract classes, never concrete implementations
- List dependencies in order: framework services, then domain services, then repositories
- Validate required dependencies with runtime checks in constructor
</requirements>
</rule>

<rule>
<name>Property Injection Usage</name>
<requirements>
- Use property injection only for optional dependencies
- Mark property injection points with decorators when using a DI framework
- Initialize optional dependencies with sensible defaults
- Document why property injection was chosen over constructor injection
- Never use property injection for required dependencies
</requirements>
</rule>

<rule>
<name>Circular Dependency Resolution</name>
<requirements>
- Detect circular dependencies using TypeScript compiler with `--traceResolution`
- Extract shared functionality into a third service to break the cycle
- Use interfaces to decouple implementations
- Apply lazy loading with factory functions as last resort
- Consider event-driven patterns for decoupling
- Never use `forwardRef` or similar hacks unless absolutely necessary
</requirements>
</rule>

<rule>
<name>Interface Design for DI</name>
<requirements>
- Define interfaces in separate files from implementations
- Use interface segregation - keep interfaces focused and small
- Name interfaces without `I` prefix (e.g., `UserService` not `IUserService`)
- Place interfaces in a `contracts` or `interfaces` directory
- Export both interface and implementation token for DI containers
</requirements>
</rule>
</rules>

<examples>
<example type="constructor-injection">
```typescript
// interfaces/user-service.interface.ts
export interface UserService {
  findById(id: string): Promise<User>;
  save(user: User): Promise<void>;
}

// interfaces/email-service.interface.ts
export interface EmailService {
  sendEmail(to: string, subject: string, body: string): Promise<void>;
}

// services/user-notification.service.ts
import { injectable, inject } from 'inversify';
import { UserService } from '../interfaces/user-service.interface';
import { EmailService } from '../interfaces/email-service.interface';
import { Logger } from '../interfaces/logger.interface';

@injectable()
export class UserNotificationService {
  constructor(
    @inject('UserService') private readonly userService: UserService,
    @inject('EmailService') private readonly emailService: EmailService,
    @inject('Logger') private readonly logger: Logger
  ) {
    // Validate required dependencies
    if (!userService) throw new Error('UserService is required');
    if (!emailService) throw new Error('EmailService is required');
    if (!logger) throw new Error('Logger is required');
  }

  async notifyUser(userId: string, message: string): Promise<void> {
    const user = await this.userService.findById(userId);
    await this.emailService.sendEmail(user.email, 'Notification', message);
    this.logger.info(`Notification sent to user ${userId}`);
  }
}
```
</example>

<example type="property-injection">
```typescript
// services/analytics.service.ts
import { injectable, inject, optional } from 'inversify';
import { MetricsCollector } from '../interfaces/metrics-collector.interface';
import { CacheService } from '../interfaces/cache-service.interface';

@injectable()
export class AnalyticsService {
  // Optional dependency via property injection
  @inject('MetricsCollector') @optional()
  private metricsCollector?: MetricsCollector;

  // Required dependency via constructor
  constructor(
    @inject('CacheService') private readonly cacheService: CacheService
  ) {
    if (!cacheService) throw new Error('CacheService is required');
  }

  async trackEvent(event: string, data: any): Promise<void> {
    // Use optional dependency if available
    if (this.metricsCollector) {
      await this.metricsCollector.record(event, data);
    }
    
    // Always use required dependency
    await this.cacheService.set(`event:${event}`, data);
  }
}
```
</example>

<example type="circular-dependency-resolution">
```typescript
// PROBLEM: Circular dependency
// services/order.service.ts (depends on PaymentService)
// services/payment.service.ts (depends on OrderService)

// SOLUTION: Extract shared functionality
// interfaces/order-events.interface.ts
export interface OrderEvents {
  onOrderCreated(orderId: string): void;
  onOrderCompleted(orderId: string): void;
}

// services/order.service.ts
@injectable()
export class OrderService {
  constructor(
    @inject('OrderEvents') private readonly orderEvents: OrderEvents,
    @inject('OrderRepository') private readonly orderRepo: OrderRepository
  ) {}

  async createOrder(data: CreateOrderDto): Promise<Order> {
    const order = await this.orderRepo.save(data);
    this.orderEvents.onOrderCreated(order.id);
    return order;
  }
}

// services/payment.service.ts
@injectable()
export class PaymentService implements OrderEvents {
  constructor(
    @inject('PaymentGateway') private readonly gateway: PaymentGateway
  ) {}

  onOrderCreated(orderId: string): void {
    // Process payment for the order
  }

  onOrderCompleted(orderId: string): void {
    // Finalize payment
  }
}

// Alternative: Lazy loading with factory
@injectable()
export class ServiceA {
  constructor(
    @inject('Factory<ServiceB>') private readonly serviceBFactory: () => ServiceB
  ) {}

  someMethod(): void {
    // Lazy load ServiceB only when needed
    const serviceB = this.serviceBFactory();
    serviceB.doSomething();
  }
}
```
</example>
</examples>

<anti-patterns>
- Creating dependencies with `new` inside classes
- Using static methods or singletons for dependencies
- Injecting concrete classes instead of interfaces
- Using service locator pattern instead of constructor injection
- Mixing business logic with dependency resolution
- Having more than 5-7 constructor parameters (indicates class does too much)
</anti-patterns>

</dependency-injection>