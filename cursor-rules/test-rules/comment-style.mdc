---
description: Guidelines for writing meaningful comments that explain why, not what
globs:
alwaysApply: false
---
<comment-style>

<title>Write Comments That Explain Why, Not What</title>

<rules>
- Avoid obvious comments that describe what the code does
- Focus on explaining why decisions were made
- Document business logic, constraints, and edge cases
- Explain workarounds and their reasons
- Clarify complex algorithms or non-obvious approaches
- Remove comments that simply restate the code
</rules>

<examples>
<example type="good">
```typescript
// Bad: States the obvious
counter++; // increment counter

// Good: Explains the why
counter++; // Retry limit based on network latency studies showing 3 attempts optimal

// Bad: Describes what the code does
if (user.age < 18) { // check if user is under 18
  return false;
}

// Good: Explains business logic
if (user.age < 18) {
  // COPPA compliance requires parental consent for users under 18
  return false;
}

// Bad: Restates the function name
// This function validates email
function validateEmail(email: string) {
  return emailRegex.test(email);
}

// Good: Explains the approach and limitations
function validateEmail(email: string) {
  // Using simplified regex that covers 99.9% of real-world emails
  // Full RFC 5322 compliance would require 4KB regex
  return emailRegex.test(email);
}
```
</example>
</examples>

</comment-style>