---
description: Guide for writing meaningful comments that explain why code exists rather than what it does
globs:
alwaysApply: false
---
<comment-style>

<title>Write Comments That Explain Why, Not What</title>

<rules>
- Avoid comments that describe what the code does (the code should be self-documenting)
- Write comments that explain why something is done, especially for non-obvious decisions
- Document business logic, workarounds, and edge cases
- Use descriptive variable and function names instead of explanatory comments
- Comment complex algorithms only if the why isn't clear from context
- Document assumptions and constraints that aren't obvious from the code
</rules>

<examples>
<example type="bad">
```javascript
// Increment counter
counter++;

// Check if user is admin
if (user.role === 'admin') {
  // Allow access
  return true;
}

// Loop through items
for (const item of items) {
  // Process item
  processItem(item);
}
```
</example>

<example type="good">
```javascript
// Reset after 1000 to prevent integer overflow in legacy systems
counter = counter >= 1000 ? 0 : counter + 1;

// Business requirement: only admins can access financial reports
if (user.role === 'admin') {
  return true;
}

// Process items in reverse order to maintain compatibility with v1 API
for (const item of items.reverse()) {
  processItem(item);
}
```
</example>
</examples>

</comment-style>