---
description: Guide for writing meaningful comments that explain why code exists, not what it does
globs:
alwaysApply: false
---
<comment-style>

<title>Write Comments That Explain Why, Not What</title>

<rules>
- Avoid comments that describe what the code does (the code already does that)
- Write comments that explain why decisions were made
- Document the business logic, edge cases, or non-obvious reasons
- Skip obvious comments like `// increment counter` or `// return result`
- Focus on intent, context, and reasoning behind the implementation
- Document workarounds, limitations, or technical debt with explanations
</rules>

<examples>
<example type="good">
```typescript
// Using a Map instead of object to preserve insertion order
// which is critical for the report generation downstream
const cache = new Map<string, CacheEntry>();

// Retry 3 times because the external API occasionally
// returns 503 errors during their maintenance windows
const MAX_RETRIES = 3;

// We need to clone the array here because the sorting
// method in the legacy module modifies it in place
const sortedItems = [...items].sort(compareFunction);

// Checking for null AND undefined because the API 
// inconsistently returns both for missing values
if (response.data != null) {
  processData(response.data);
}
```
</example>
</examples>

</comment-style>