---
description: How to add Cursor rules (ALWAYS read before adding rules)
globs:
alwaysApply: false
---

<cursor-rules-guide>

# Cursor Rules - Organization and Format

<location>
## Location
All cursor rules should be placed in the `.cursor/rules/` directory with the `.mdc` extension.

<dont>
❌ Do NOT create:
- `.cursorrules` file in the root (deprecated)
- Rules in other locations
- Rules with other extensions
</dont>

<do>
✅ DO create:
- `.cursor/rules/{descriptive-name}.mdc`
- One rule per file
- Clear, focused rules
</do>
</location>

<file-naming>
## File Naming
- Use kebab-case: `my-rule-name.mdc`
- Be descriptive but concise
- Group related rules with common prefixes

<examples>
Examples:
- `github-actions-runners.mdc`
- `docker-compose.mdc`
- `development-workflow.mdc`
</examples>
</file-naming>

<rule-format>
## Rule Format
Rules should use **XML-style tags** to structure content for better Claude 4 compatibility, while allowing markdown lists within tags for token efficiency.

```xml
<rule-name-guidelines>

# Title - Brief Description

<context>
## Context/Location
Where this rule applies (files, directories, etc.)
</context>

<overview>
### Overview/Architecture
High-level explanation of the system/pattern
</overview>

<key-concepts>
### Key Concepts
- First important concept
- Second important concept
- Additional concepts as needed
</key-concepts>

<rules>
### Rules

<rule>
**Rule name**
- First requirement or detail
- Second requirement or detail
- Additional requirements
</rule>

<rule>
**Another rule**
1. First numbered step (when order matters)
2. Second numbered step
3. Third numbered step
</rule>
</rules>

<examples>
### Examples

<example type="good">
```typescript
// Good example code here
```
</example>

<example type="bad">
```typescript
// Bad example code here
```
</example>
</examples>

</rule-name-guidelines>
```

### XML Tag Guidelines for LLM Readability

#### Structure Requirements
- **XML tags for sections** - Use XML tags to define major sections and provide structure
- **Markdown within tags** - Markdown headers, lists, and formatting are allowed inside XML tags
- **Consistent nesting** - Maintain clear parent-child relationships with XML tags
- **Balance efficiency and structure** - Use XML for semantic structure, markdown for content formatting

#### Tag Design Principles
- **Semantic names** - Tags should describe content sections, not formatting
- **Lowercase with hyphens** - `<rule-name>` not `<RuleName>` or `<rule_name>`
- **Attributes for metadata** - Use `type="good"`, `language="typescript"`, `id="1"`
- **Wrap related content** - Use tags to group logically related content

#### When to Use Lists
```xml
<!-- Use dash lists for unordered items -->
<requirements>
- Each requirement is important
- Order doesn't matter
- Keep items concise
</requirements>

<!-- Use numbered lists when order matters -->
<steps>
1. First do this
2. Then do that
3. Finally do this
</steps>

<!-- For simple lists, just use markdown -->
<types>
- `feat:` - New feature
- `fix:` - Bug fix
- `docs:` - Documentation
</types>
```

#### Common Patterns
```xml
<!-- Lists save tokens vs individual tags -->
<concepts>
- Concept one explanation
- Concept two explanation
- Concept three explanation
</concepts>

<!-- Code examples with attributes -->
<example type="good">
```typescript
// Code here
```
</example>

<!-- Key-value pairs can use markdown -->
<types>
- `feat:` - New feature or functionality
- `fix:` - Bug fix
- `chore:` - Maintenance tasks
</types>
```

#### What to Avoid
- ❌ Over-tagging: Don't wrap every list item in its own tag
- ❌ Generic tags: `<section>`, `<div>`, `<content>`
- ❌ Inconsistent structure: Pick a pattern and stick with it

#### Benefits for LLMs
- Unambiguous structure for parsing
- Clear data extraction paths
- Consistent patterns across all rules
- Machine-readable without markdown parsing
- Explicit relationships between elements
</rule-format>

<best-practices>
## Best Practices
- **Use XML-style tags** - Structure content with XML tags for better Claude 4 compatibility
- **Markdown lists are fine** - Use `-` lists or numbered lists within XML tags to save tokens
- **Balance structure and efficiency** - XML for semantic sections, markdown for content
- **Focus on patterns** - Describe patterns rather than providing static templates
- **Let LLMs learn from code** - Reference existing code patterns when possible
- **Single-purpose rules** - Each rule file should focus on one specific topic
- **Regular updates** - Update rules when patterns significantly change
- **Clean obsolete rules** - Remove rules that are no longer relevant
- **Semantic tag names** - Choose tags that describe content sections, not formatting
- **Consistent structure** - Use the same patterns across all rules
</best-practices>

<current-rules>
## Current Rules
Reference the existing rules in `.cursor/rules/` for examples of proper formatting and organization:
- `monorepo-structure.mdc`
- `development-workflow.mdc`
- `cli-tools.mdc`
- `docker-compose.mdc`
- `server-management.mdc`
- `github-actions-runners.mdc`
</current-rules>

</cursor-rules-guide>
