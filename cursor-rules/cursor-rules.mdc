---
description: How to add Cursor rules (ALWAYS read before adding rules)
globs:
alwaysApply: false
---

<cursor-rules-guide>

# Cursor Rules - Organization and Format

<location>
## Location
All cursor rules should be placed in the `.cursor/rules/` directory with the `.mdc` extension.

<dont>
❌ Do NOT create:
- `.cursorrules` file in the root (deprecated)
- Rules in other locations
- Rules with other extensions
</dont>

<do>
✅ DO create:
- `.cursor/rules/{descriptive-name}.mdc`
- One rule per file
- Clear, focused rules
</do>
</location>

<file-naming>
## File Naming
- Use kebab-case: `my-rule-name.mdc`
- Be descriptive but concise
- Group related rules with common prefixes

<examples>
Examples:
- `github-actions-runners.mdc`
- `docker-compose.mdc`
- `development-workflow.mdc`
</examples>
</file-naming>

<rule-format>
## Rule Format
Rules should be written in Markdown with XML-style tags for better Claude 4 compatibility:

```markdown
<rule-name>

# Title - Brief Description

<context>
## Context/Location
Where this rule applies (files, directories, etc.)
</context>

<overview>
### Overview/Architecture
High-level explanation of the system/pattern
</overview>

<key-concepts>
### Key Concepts
Important points to understand
</key-concepts>

<usage>
### Usage/Patterns
How to apply the rule
</usage>

<examples>
### Examples
Clear, concrete examples
</examples>

</rule-name>
```

### XML Tag Guidelines

- Wrap the entire rule in a descriptive root tag (e.g., `<git-commit-guidelines>`)
- Use semantic tags for major sections (e.g., `<rules>`, `<examples>`, `<best-practices>`)
- Use `<rule>` tags for individual rules or guidelines
- Use `<example>` tags with optional `type="good"` or `type="bad"` attributes
- Keep tag names lowercase with hyphens for multi-word names
- Close all tags properly to maintain valid XML structure
  </rule-format>

<best-practices>
## Best Practices
- Use XML-style tags to structure content for better Claude 4 compatibility
- Focus on describing patterns rather than providing static templates
- Let LLMs learn from existing code when possible
- Keep rules focused and single-purpose
- Update rules when patterns significantly change
- Remove rules that become obsolete
- Choose semantic tag names that clearly describe the content they wrap
</best-practices>

<current-rules>
## Current Rules
Reference the existing rules in `.cursor/rules/` for examples of proper formatting and organization:
- `monorepo-structure.mdc`
- `development-workflow.mdc`
- `cli-tools.mdc`
- `docker-compose.mdc`
- `server-management.mdc`
- `github-actions-runners.mdc`
</current-rules>

</cursor-rules-guide>
