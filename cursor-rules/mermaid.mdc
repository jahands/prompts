---
description: Formatting requirements for Mermaid diagrams to ensure compatibility and avoid parsing errors. ALWAYS read when creating/updating mermaid diagrams.
globs:
alwaysApply: false
---
<mermaid-diagram-formatting>

<rules>
- Always wrap content with special characters, multiline text, or complex syntax in both double quotes and <p> tags: `["<p>content</p>"]`
- Use `<br/>` for line breaks within quoted node labels, never `\n`
- NEVER use unquoted special characters: parentheses `()`, curly braces `{}`, angle brackets `<>`, single quotes `'`, colons `:`
- Database/cylinder nodes require special syntax: `NodeName[("Label text<br/>Additional info")]`
- Complex syntax (function calls, code snippets) is allowed if properly quoted, but NEVER use JSON
- Use markdown code blocks with `mermaid` language identifier
- Sequence diagrams can handle some unquoted text differently than graph diagrams
- Wrap edge labels starting with "number. " in HTML tags (e.g., `<p>1. Step</p>`) to prevent markdown list parsing
- NEVER use style commands on subgraph names - only on node IDs
- NEVER use JSON syntax - use plain text descriptions instead
- NEVER use Mermaid keywords (graph, subgraph, node, edge, etc.) as class names or node IDs
- Use proper class syntax: `classDef name styles;` then `class nodes name;`
- NEVER use unsupported HTML tags like `<pre>`, `<code>` - only use: `<p>`, `<b>`, `<i>`, `<u>`, `<br/>`
- Always style with dark mode canvas in mind
</rules>

<example>
```mermaid
graph TB
    User -- "<p>1. Submit request</p>" --> API["<p>External API<br/>Service Layer</p>"]
    API --> DB[("Database<br/>Storage")]
    API --> Worker["Background Worker<br/>processJob()<br/>Async execution"]
    
    subgraph "Processing Layer"
        Client["typed client<br/>interface"]
        Methods["Method calls:<br/>client.getData({id: string})<br/>client.process({data: object})"]
    end
```
</example>

</mermaid-diagram-formatting>